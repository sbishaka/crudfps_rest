/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.internal.utils;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * CREATES A CRUDFPS SYSTEM FOR A HIBERNATE ENVIRONMENT
 * 
 *  ASSUMPTIONS
 *      1)ID'S are labled id and are autogenerated by the underlying database;
 */

public class CrudfpsCreator {
    
    public enum IDES{
        netbeans
    }
    
    public static void construct(String name, IDES ide)
    {
        switch(ide)
        {
            case netbeans:
                List<Class> classes = ClassFinder.getClasses_netbeans("com.database.hibernate");
                String result = create(name, "com.database.crudfps", classes);
                write_netbeans(get_crudfps_Name(name), result);
            break;
                
            default:
            break;
        }
    }
    
    public static String create(String name, IDES ide)
    {
        switch(ide)
        {
            case netbeans:
                List<Class> classes = ClassFinder.getClasses_netbeans("com.database.hibernate");
                return create(name, classes);
            
            default:
                return null;
                
        }
    }
    
    public static String create(String name, String pkg ,IDES ide)
    {
        switch(ide)
        {
            case netbeans:
                List<Class> classes = ClassFinder.getClasses_netbeans("com.database.hibernate");
                return create(name, pkg, classes);
            
            default:
                return null;
                
        }
    }
    
    public static String create(String name, Class type )
    {
        String result = "";
        
        result += get_crudfps_Imports(type);
        result += get_crudfps_Imports_dflt();
        
        result += "public class " + get_crudfps_Name(name) + " {\n\n";
        result += get_crudfps_Head(name);
        result += "\n\n";
        
        result += get_crudfps(type);
        
        result += "\n\n";
        result += get_crudfps_Foot(name);
        result += "\n\n}";
        
        return result;
    }

    public static String create(String name, Class... types )
    {
        String result = "";
        
        for (Class type : types) {
            result += get_crudfps_Imports(type);
        }
        result += get_crudfps_Imports_dflt();
        
        result += "public class " + get_crudfps_Name(name) + " {\n\n";
        result += get_crudfps_Head(name);
        result += "\n\n";
        
        for (Class type : types) {
            result += get_crudfps(type);
        }
        
        result += "\n\n";
        result += get_crudfps_Foot(name);
        result += "\n\n}";
        
        return result;
    }

    public static String create(String name, List<Class> types )
    {
        String result = "";
        
        for (Class type : types) {
            result += get_crudfps_Imports(type);
        }
        result += get_crudfps_Imports_dflt();
        
        result += "public class " + get_crudfps_Name(name) + " {\n\n";
        result += get_crudfps_Head(name);
        result += "\n\n";
        
        for (Class type : types) {
            result += get_crudfps(type);
        }
        
        result += "\n\n";
        result += get_crudfps_Foot(name);
        result += "\n\n}";
        
        return result;
    }

    public static String create(String name, String pkg, List<Class> types )
    {
        String result = "";
        
        result += "package " + pkg + ";";
        result += "\n\n";
        
        for (Class type : types) {
            result += get_crudfps_Imports(type);
        }
        result += get_crudfps_Imports_dflt();
        
        result += "public class " + get_crudfps_Name(name) + " {\n\n";
        result += get_crudfps_Head(name);
        result += "\n\n";
        
        for (Class type : types) {
            result += get_crudfps(type);
        }
        
        result += "\n\n";
        result += get_crudfps_Foot(name);
        result += "\n\n}";
        
        return result;
    }

    private static String get_crudfps(Class type)
    {
        String result = "/*\n"
                + "#############################\n"
                + "    Begin Table : "+type.getSimpleName().toLowerCase()+"\n"
                + "#############################    \n"
                + "*/";
        result += "\n\n";
        result += get_crudfps_create(type);
        result += "\n\n";
        result += get_crudfps_read(type);
        result += "\n\n";
        result += get_crudfps_update(type);
        result += "\n\n";
        result += get_crudfps_delete(type);
        result += "\n\n";
        result += get_crudfps_print(type);        
        result += "\n\n";
        result += "/*\n#############################\n"
                + "    End Table : "+type.getSimpleName().toLowerCase()+"\n"
                + "#############################    \n"
                + "*/";
        
        return result;
    }
    
    private static String get_crudfps_Head(String name)
    {
        String result = "";
        result += "private final Session _SESS;\n\n"
                + "public "+get_crudfps_Name(name)+"(Session _SESS) {\n"
                + "\tthis._SESS = _SESS;\n}";
        return result;
    }
    
    private static String get_crudfps_Name(String name)
    {
        return name+"CRUDFPS";
    }

    private static String get_crudfps_Imports(Class type)
    {
        return "import "+type.getName()+";\n";
    }
       
    private static String get_crudfps_Imports_dflt()
    {
        String result = "";
        
        result += "import com.internal.utils.StringCaseTool;\n"
                + "import java.io.Serializable;\n"
                + "import java.lang.reflect.Field;\n"
                + "import java.lang.reflect.InvocationTargetException;\n"
                + "import java.lang.reflect.Method;\n"
                + "import java.util.List;\n"
                + "import java.util.logging.Level;\n"
                + "import java.util.logging.Logger;\n"
                + "import org.hibernate.Session;\n\n";
        
        return result;
    }
    
    private static String get_crudfps_create(Class type)
    {
        String result = "";
        
        
        /*
        Normal Create functions
        */
        result  += "public void create_"+type.getSimpleName()+"("+type.getSimpleName()+" "
                + ""+type.getSimpleName().toLowerCase()+")\n{\n"
                + "    "+type.getSimpleName()+" ref = "+type.getSimpleName().toLowerCase()+";\n"
                + "    this.save(ref);\n}\n\n"
                + "public void create_"+type.getSimpleName()+""
                + "(List<"+type.getSimpleName()+"> "+type.getSimpleName().toLowerCase()+"s)\n{\n"
                + "    List<"+type.getSimpleName()+"> refs = "+type.getSimpleName().toLowerCase()+"s;\n    this.save_bulk(refs);\n}";
        
        /*
        Create functions that return the newly created object
        */
        result += "\n\n";
        
        result += "public "+type.getSimpleName()+" create_Rtrn_"+type.getSimpleName()
                +"("+type.getSimpleName()+" "+type.getSimpleName().toLowerCase()+")\n{\n"
                + "    "+type.getSimpleName()+" ref = "+type.getSimpleName().toLowerCase()
                +";\n    this.save(ref);\n    return ref;\n}";
        return result;
    }

    public static String get_crudfps_read(Class type)
    {
        String result = "";
        result += "public "+type.getSimpleName()+" read_"+type.getSimpleName()+"(int id)\n{\n"
                + "    "+type.getSimpleName()+" result = null;\n"
                + "    result = ("+type.getSimpleName()+")this.get("+type.getSimpleName()+".class, id);\n"
                + "    return result;\n}\n\n"
                + "public List<"+type.getSimpleName()+"> read_All_"+type.getSimpleName()+"()\n{\n"
                + "    List<"+type.getSimpleName()+"> result = this.get_All("+type.getSimpleName()+".class);\n    return result;\n}";
        return result;
    }
    
    public static String get_crudfps_update(Class type)
    {
        String result = "";
        result += "public void update_"+type.getSimpleName()+"( int id, "+get_Method_Args(type)+")\n{\n"
               + "    "+type.getSimpleName()+" "+type.getSimpleName().toLowerCase()+" = "
                + "this.read_"+type.getSimpleName()+"(id);\n"
                + ""+get_update_Grbg_Mthds(type)+"\n"
                + "    this.save("+type.getSimpleName().toLowerCase()+");\n}";        
        return result;
    }
    
    public static String get_crudfps_delete(Class type)
    {
        String result = "";
        
        
        result += "public void delete_"+type.getSimpleName()+"(int id)\n"
                + "{\n"
                + "    this.delete(this.read_"+type.getSimpleName()+"(id));\n"
                + "}";
        
        result += "\n\n";
        
        result  += "public void delete_"+type.getSimpleName()+"("+type.getSimpleName()+" "
                + ""+type.getSimpleName().toLowerCase()+")\n{\n"
                + "    "+type.getSimpleName()+" ref = "+type.getSimpleName().toLowerCase()+";\n"
                + "    this.delete(ref);\n}";
        
        result += "\n\n";
        
        result += "public void delete_"+type.getSimpleName()+""
                + "(List<"+type.getSimpleName()+"> "+type.getSimpleName().toLowerCase()+"s)\n{\n"
                + "    List<"+type.getSimpleName()+"> refs = "+type.getSimpleName().toLowerCase()+"s;\n    this.delete_bulk(refs);\n}";
        
        return result;
    }
    
    public static String get_crudfps_print(Class type)
    {
        String result = "";
        /*
        Normal print
        */
        result += "public void print_"+type.getSimpleName()+"(int id)\n{\n    this.print(this.read_"+type.getSimpleName()+"(id));\n}";
        result += "\n\n";
        /*
        bulk print
        */
        result += "public void print_All_"+type.getSimpleName()+"()\n{\n    List<"+type.getSimpleName()+"> "+type.getSimpleName().toLowerCase()+"s = this.read_All_"+type.getSimpleName()+"();\n    for ("+type.getSimpleName()+" "+type.getSimpleName().toLowerCase()+" : "+type.getSimpleName().toLowerCase()+"s) {\n        this.print("+type.getSimpleName().toLowerCase()+");\n        System.out.println();\n    }\n}";
        
        return result;
    }
    
    public static String get_update_Grbg_Mthds(Class type)
    {
        String result = "";
        int started = 0;
        
        Field[] fields = type.getDeclaredFields();
        for (Field field : fields) {
            if(started > 1)
            {
                result += "\n";
            }

            if( !field.getType().getSimpleName().equalsIgnoreCase("Integer") && 
                !field.getName().equalsIgnoreCase("id"))
            {
                if( !field.getType().getSimpleName().equalsIgnoreCase("Set") )
                {  
                    result += "    "+type.getSimpleName().toLowerCase()+".set"+StringCaseTool.toCamelCase(field.getName())+"((isGarbage("+get_Arg_Inst(field.getName())+"))? "+type.getSimpleName().toLowerCase()+".get"+StringCaseTool.toCamelCase(field.getName())+"():"+get_Arg_Inst(field.getName())+");";            
                }
                else
                {
                    result = result.substring(0, result.length()-1);
                }
            }
            
            started++;
        }
        
        return result;      
    }
    
    public static String get_crudfps_Foot(String name)
    {
        
        String result = "";
        /*
        Section head
        */
        result += "/*\n#############################\n    Utility Functions\n#############################    \n*/";
        
        /*
        Save 
        */
        result += "\n\n";
        result += "public void save(Object obj)\n{\n    this._SESS.beginTransaction();\n    this._SESS.save(obj);\n    this._SESS.getTransaction().commit();\n}";
        
        /*
        Save bulk 
        */
        result += "\n\n";
        result += "public void save_bulk( List objs )\n{\n    /**\n     TO DO: LOOK FOR SANE HIBERNATE BATCH OPERATION CODE\n     */\n    this._SESS.beginTransaction();\n\n    for (Object obj : objs) {\n      this._SESS.save(obj);  \n    }\n    \n    this._SESS.getTransaction().commit();\n    \n}";
        
        /*
        delete 
        */
        result += "\n\n";
        result += "public void delete(Object obj)\n{\n    this._SESS.beginTransaction();\n    this._SESS.delete(obj);\n    this._SESS.getTransaction().commit();\n}";
        
        
        /*
        delete bulk 
        */        
        result += "\n\n";
        result += "public void delete_bulk( List objs )\n{\n    /**\n     TO DO: LOOK FOR SANE HIBERNATE BATCH OPERATION CODE\n     */\n    this._SESS.beginTransaction();\n\n    for (Object obj : objs) {\n      this._SESS.delete(obj);  \n    }\n    \n    this._SESS.getTransaction().commit();\n    \n}";
        
        
        /*
        get 
        */ 
        result += "\n\n";
        result += "private Object get(Class type, Serializable srlzbl)\n{\n   return this._SESS.get(type, srlzbl);\n}";
        
        
        /*
        get all 
        */     
        result += "\n\n";
        result += "private List get_All(Class type)\n{\n   return this._SESS.createCriteria(type).list();\n}";
        
        
        /*
        is Gargage( String ) 
        */        
        result += "\n\n";
        result += "private boolean isGarbage(String string)\n{\n    return string == null || string.isEmpty();\n}";
        
        
        /*
        is Gargage( Object ) 
        */        
        result += "\n\n";
        result += "private boolean isGarbage(Object obj)\n{\n    return obj == null;\n}";
        
        /*
        print( Class ) 
        */        
        
        /*
        print( Object ) 
        */   
        result += "\n\n";
        result += "private void print(Object obj)\n{\n    Class<?> type = obj.getClass();\n    Field[] fields = type.getDeclaredFields();\n    \n    for (Field field : fields) {\n           \n        if(!field.getType().getSimpleName().equalsIgnoreCase(\"Set\"))\n        {\n        try {            \n            System.out.println(field.getName() + \"\t: \" + field.get(obj));            \n        } catch (IllegalArgumentException ex) {\n            Logger.getLogger("+get_crudfps_Name(name)+".class.getName()).log(Level.SEVERE, null, ex);\n        } catch (IllegalAccessException ex) {            \n            try {                \n                    Method method = type.getDeclaredMethod(\"get\"+StringCaseTool.toCamelCase(field.getName()));\n                    Object result = method.invoke(obj);\n                    System.out.println(field.getName() + \"\t: \" + result);\n                    \n            } catch (NoSuchMethodException ex1) {\n                Logger.getLogger("+get_crudfps_Name(name)+".class.getName()).log(Level.SEVERE, null, ex1);\n            } catch (SecurityException ex1) {\n                Logger.getLogger("+get_crudfps_Name(name)+".class.getName()).log(Level.SEVERE, null, ex1);\n            } catch (IllegalAccessException ex1) {\n                Logger.getLogger("+get_crudfps_Name(name)+".class.getName()).log(Level.SEVERE, null, ex1);\n            } catch (IllegalArgumentException ex1) {\n                Logger.getLogger("+get_crudfps_Name(name)+".class.getName()).log(Level.SEVERE, null, ex1);\n            } catch (InvocationTargetException ex1) {\n                Logger.getLogger("+get_crudfps_Name(name)+".class.getName()).log(Level.SEVERE, null, ex1);\n            }\n            \n        }        \n        }\n        \n    }\n    \n}";       
        
        /*
        Shutdown
        */
        result += "\n\n";
        result += "public void shutdown()\n{\n    this._SESS.clear();\n    this._SESS.close();\n}";


        
        /*
            get session
        */
        result += "\n\n";
        result += "public Session getSESS() {\n    return _SESS;\n}\n";
    
    
        return result;
    }
    
    private static String get_Method_Args(Class type)
    {
        String result = "";
        int started = 0;
        
        Field[] fields = type.getDeclaredFields();
        for (Field field : fields) {
            if(started > 1)
            {
                result += ", ";
            }

            if(!field.getName().equalsIgnoreCase("id"))
            {
                if( !field.getType().getSimpleName().equalsIgnoreCase("Set") )
                {       
                       result += field.getType().getSimpleName() + " " 
                       + get_Arg_Inst(field.getName());
                }
                else
                {
                    result = result.substring(0, result.length()-2);
                }

            }
            
            started++;
        }
        
        return result;
    }
    
    private static String get_Arg_Inst(String name)
    {
        return "_"+name;
    }
    
    private static String get_Method_Args_Inst(Class type)
    {
        String result = "";
        int started = 0;
        
        Field[] fields = type.getDeclaredFields();
        for (Field field : fields) {
            if(started > 1)
            {
                result += ", ";
            }
            
            if( 
               !field.getName().equalsIgnoreCase("id"))           
            {
                if( !field.getType().getSimpleName().equalsIgnoreCase("Set") )
                {  
                    result += get_Arg_Inst(field.getName());
                }
                else
                {
                    result = result.substring(0, result.length()-2);
                }
            }
            
            started++;
        }
        
        return result;
    }


    public static void write_netbeans( String name, String content )
    {
        String dir = "./src/com/database/crudfps/";
        String filename = dir+name+".java";
        File buff = null;
        
        buff = new File(dir);
        if( !buff.exists() )
        {
            buff.mkdirs();
        }
        
        buff = new File(filename);
        
        if(buff.exists())
        {
            buff.delete();
        }
        
        try {
            
            FileWriter fw = new FileWriter(buff);
            
            if( content == null )
            {
                content = "";
            }
            
            fw.write(content);
            fw.flush();
            fw.close();
        } catch (IOException ex) {
            Logger.getLogger(CrudfpsCreator.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

}
